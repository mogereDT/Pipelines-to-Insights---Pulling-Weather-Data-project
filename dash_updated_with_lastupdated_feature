# requirements: pip install dash pandas plotly requests openmeteo-requests requests-cache retry-requests
# run: python dashboard_weather.py

import openmeteo_requests
import pandas as pd
import requests_cache
import requests
from retry_requests import retry
import dash
from dash import dcc, html, dash_table
from dash.dependencies import Input, Output
import plotly.express as px, plotly.graph_objects as go
from datetime import datetime, timedelta
from pathlib import Path

cache_sess = requests_cache.CachedSession('.cache', expire_after=3600)
retry_sess = retry(cache_sess, retries=5, backoff_factor=0.2)
openmeteo = openmeteo_requests.Client(session=retry_sess)

RAW_URL = "https://api.open-meteo.com/v1/forecast"
RAW_PARAMS = {
    "latitude": [36.9685, 38.0406, 38.2527],
    "longitude": [-86.4808, -84.5037, -85.7585],
    "hourly": ["temperature_2m","precipitation","visibility","wind_speed_10m","relative_humidity_2m"]
}
resp0 = openmeteo.weather_api(RAW_URL, params=RAW_PARAMS)[0].Hourly()
hourly_df = pd.DataFrame({
    "date": pd.date_range(
        start=pd.to_datetime(resp0.Time(), unit="s", utc=True),
        end=pd.to_datetime(resp0.TimeEnd(), unit="s", utc=True),
        freq=pd.Timedelta(seconds=resp0.Interval()),
        inclusive="left"
    ),
    "temperature_2m": resp0.Variables(0).ValuesAsNumpy().round(0),
    "precipitation_mm": resp0.Variables(1).ValuesAsNumpy().round(0),
    "visibility": resp0.Variables(2).ValuesAsNumpy().round(0),
    "wind_speed_10m_kmh": resp0.Variables(3).ValuesAsNumpy().round(0),
    "relative_humidity_%": resp0.Variables(4).ValuesAsNumpy().round(0)
})
print("Raw Open-Meteo example (first 5 rows):")
print(hourly_df.head())

BASE_DIR = Path(__file__).parent
ASSETS_DIR = BASE_DIR / "assets"
app = dash.Dash(__name__, assets_folder=str(ASSETS_DIR))
app.title = "KY Weather Dashboard"

cities = {
    'Louisville, KY': (38.2527, -85.7585),
    'Lexington, KY': (38.0406, -84.5037),
    'Bowling Green, KY': (36.9685, -86.4808)
}

last_updated_time = datetime.now() # Initialize with current time

def fetch_weather_data(city):
    global last_updated_time # Declare global to modify it
    lat, lon = cities[city]
    today = datetime.today().date()
    start = today - timedelta(days=6)
    r = requests.get(
        "https://archive-api.open-meteo.com/v1/archive"
        f"?latitude={lat}&longitude={lon}"
        "&daily=temperature_2m_max,temperature_2m_min,precipitation_sum,windspeed_10m_max"
        "&timezone=America/New_York"
        f"&start_date={start}&end_date={today}"
    )
    d = r.json().get('daily', {})
    if not d.get('time'):
        return pd.DataFrame()
    df = pd.DataFrame({
        'date': pd.to_datetime(d['time']),
        'temp_max_c': d['temperature_2m_max'],
        'temp_min_c': d['temperature_2m_min'],
        'precip_mm': d['precipitation_sum'],
        'wind_kmh': d['windspeed_10m_max'],
    })
    df['humidity_%'] = (
        60 + df['wind_kmh'].rolling(2, min_periods=1).mean().fillna(0)
    ).round(0).astype(int)
    last_updated_time = datetime.now() # Update time after successful data fetch
    return df

def fetch_forecast_data(city):
    lat, lon = cities[city]
    today = datetime.today().date()
    future = today + timedelta(days=6)
    r = requests.get(
        "https://api.open-meteo.com/v1/forecast"
        f"?latitude={lat}&longitude={lon}"
        "&daily=temperature_2m_max,temperature_2m_min,precipitation_sum"
        "&timezone=America/New_York"
        f"&start_date={today}&end_date={future}"
    )
    d = r.json().get('daily', {})
    if not d.get('time'):
        return pd.DataFrame()
    return pd.DataFrame({
        'date': pd.to_datetime(d['time']),
        'temp_max_c': d['temperature_2m_max'],
        'temp_min_c': d['temperature_2m_min'],
        'precip_mm': d['precipitation_sum'],
    })

default_city = 'Louisville, KY'
hist_df = fetch_weather_data(default_city)


app.layout = html.Div([
    html.Div(style={'display': 'flex', 'justifyContent': 'space-between', 'alignItems': 'center'}, children=[
        html.Img(src=app.get_asset_url("Seal_of_Kentucky.png"),
                 style={'height':'80px'}),
        html.H1("Kentucky Weather Dashboard", style={'textAlign':'center', 'flexGrow': 1}),
        html.Div(id='last-updated', style={
            'backgroundColor': 'black',
            'color': 'white',
            'padding': '5px 10px',
            'borderRadius': '5px',
            'fontSize': '0.9em'
        })
    ]),
    html.Div([
        dcc.RadioItems(id='city',
            options=[{'label':c,'value':c} for c in cities],
            value=default_city,
            labelStyle={'display':'inline-block','marginRight':'20px'}
        ),
        dcc.RadioItems(id='temp-unit',
            options=[{'label':'°F','value':'fahrenheit'},
                     {'label':'°C','value':'celsius'}],
            value='fahrenheit',
            labelStyle={'display':'inline-block','marginRight':'20px'}
        ),
        dcc.RadioItems(id='wind-unit',
            options=[{'label':'mph','value':'mph'},
                     {'label':'km/h','value':'kph'}],
            value='mph',
            labelStyle={'display':'inline-block','marginRight':'20px'}
        ),
        dcc.RadioItems(id='precip-unit',
            options=[{'label':'inches','value':'in'},
                     {'label':'cm','value':'cm'}],
            value='in',
            labelStyle={'display':'inline-block','marginRight':'20px'}
        ),
        dcc.DatePickerRange(id='date-picker',
            start_date=hist_df['date'].min(),
            end_date=hist_df['date'].max(),
            display_format='YYYY-MM-DD',
            style={'display':'inline-block','marginLeft':'20px'}
        )
    ], style={'padding':'20px','whiteSpace':'nowrap'}),

    html.H3("City Temperature Map", style={'textAlign':'center','marginTop':'20px'}),
    dcc.Graph(id='map-graph'),

    html.H3("7-Day Forecast", style={'textAlign':'center','marginTop':'20px'}),
    dcc.Graph(id='forecast-graph'),

    html.H3("Daily Data Table", style={'textAlign':'center','marginTop':'20px'}),
    dash_table.DataTable(id='data-table',
                            sort_action='native',
                            filter_action='native',
                            page_size=7,
                            style_table={'overflowX':'auto'}),

    html.Div(id='cards', style={'display':'flex','justifyContent':'space-around','margin':'20px 0'}),

    html.H3("Historical Temperature", style={'textAlign':'center','marginTop':'20px'}),
    dcc.Graph(id='temp-graph'),

    html.H3("Historical Humidity (%)", style={'textAlign':'center','marginTop':'20px'}),
    dcc.Graph(id='humidity-graph'),

    html.H3("Historical Precipitation", style={'textAlign':'center','marginTop':'20px'}),
    dcc.Graph(id='precip-graph'),

    html.H3("Historical Wind Speed", style={'textAlign':'center','marginTop':'20px'}),
    dcc.Graph(id='wind-gauge'),
])

@app.callback(
    Output('map-graph','figure'),
    Output('forecast-graph','figure'),
    Output('data-table','data'),
    Output('data-table','columns'),
    Output('temp-graph','figure'),
    Output('humidity-graph','figure'),
    Output('precip-graph','figure'),
    Output('wind-gauge','figure'),
    Output('cards','children'),
    Output('date-picker','start_date'),
    Output('date-picker','end_date'),
    Output('last-updated', 'children'), # New output for the last updated time
    Input('city','value'),
    Input('temp-unit','value'),
    Input('wind-unit','value'),
    Input('precip-unit','value'),
)
def update_all(city, t_unit, w_unit, p_unit):
    df = fetch_weather_data(city)
    fdf = fetch_forecast_data(city)
    current_last_updated_time = last_updated_time.strftime("%Y-%m-%d %H:%M:%S") # Format the timestamp

    if df.empty:
        e = go.Figure().add_annotation(text="No data", x=0.5, y=0.5, showarrow=False)
        return e, e, [], [], e, e, e, e, [html.P("No data")], None, None, f"Last Updated: {current_last_updated_time}"

    if t_unit=='fahrenheit':
        df['temp_max'] = (df['temp_max_c']*9/5+32).round(0)
        df['temp_min'] = (df['temp_min_c']*9/5+32).round(0)
        fdf['temp_max']= (fdf['temp_max_c']*9/5+32).round(0)
        fdf['temp_min']= (fdf['temp_min_c']*9/5+32).round(0)
        tl, fl = '°F','°F'
    else:
        df['temp_max'] = df['temp_max_c'].round(0)
        df['temp_min'] = df['temp_min_c'].round(0)
        fdf['temp_max']= fdf['temp_max_c'].round(0)
        fdf['temp_min']= fdf['temp_min_c'].round(0)
        tl, fl = '°C','°C'

    if w_unit=='mph':
        df['wind'] = (df['wind_kmh']*0.621371).round(0)
        wl='mph'
    else:
        df['wind'] = df['wind_kmh'].round(0)
        wl='km/h'

    if p_unit=='in':
        df['precip'] = (df['precip_mm'].fillna(0)/25.4).round(0)
        pl='in'
    else:
        df['precip'] = (df['precip_mm'].fillna(0)/10).round(0)
        pl='cm'

    start, end = df['date'].min(), df['date'].max()

    map_rows = []
    for nm,(la,lo) in cities.items():
        tmp = fetch_weather_data(nm)
        if tmp.empty: continue
        tm = (tmp['temp_max_c']*9/5+32).round(0) if t_unit=='fahrenheit' else tmp['temp_max_c'].round(0)
        tmv=tm.dropna()
        if tmv.empty: continue
        map_rows.append({'city':nm,'lat':la,'lon':lo,'temp':tmv.iloc[-1]})
    mg = px.scatter_mapbox(pd.DataFrame(map_rows), lat='lat', lon='lon',
                            size='temp', color='temp', hover_name='city',
                            zoom=6, mapbox_style='open-street-map',
                            title="City Temps")

    fc = px.line(fdf, x='date', y=['temp_max','temp_min'],
                    labels={'value':f'Temp ({fl})','variable':'Type'},
                    title=f"{city} 7-Day Forecast")

    td = df[['date','temp_max','temp_min','humidity_%','precip','wind']].copy()
    td['date'] = td['date'].dt.strftime('%Y-%m-%d')
    table_data = td.to_dict('records')
    table_cols = [
        {"name":"Date","id":"date"},
        {"name":f"Max Temp ({tl})","id":"temp_max"},
        {"name":f"Min Temp ({tl})","id":"temp_min"},
        {"name":"Humidity (%)","id":"humidity_%"},
        {"name":f"Precipitation ({pl})","id":"precip"},
        {"name":f"Wind ({wl})","id":"wind"}
    ]

    temp_ch = px.line(df, x='date', y=['temp_max','temp_min'],
                        labels={'value':f'Temp ({tl})','variable':'Type'},
                        title=f"{city} (Historical)")
    hum_ch = px.line(df, x='date', y='humidity_%',
                        labels={'humidity_%':'Humidity (%)'},
                        title="Humidity (Historical)")
    precip_ch = px.bar(df, x='date', y='precip',
                        labels={'precip':f'Precipitation ({pl})'},
                        title="Precipitation (Historical)")
    precip_ch.update_yaxes(range=[0, max(1, df['precip'].max()+1)])
    wind_ch = go.Figure(go.Indicator(mode="gauge+number",
                                        value=df['wind'].mean().round(0),
                                        title={'text':f"Avg Wind Speed ({wl})"},
                                        gauge={'axis':{'range':[0,df['wind'].max()*1.2]},
                                                'steps':[{'range':[0,10],'color':"lightgreen"},
                                                        {'range':[10,20],'color':"yellow"},
                                                        {'range':[20,df['wind'].max()*1.2],'color':"red"}]}))

    cards = [
        html.Div([html.H4("Max Temp"), html.P(f"{df['temp_max'].max():.0f}{tl}")]),
        html.Div([html.H4("Min Temp"), html.P(f"{df['temp_min'].min():.0f}{tl}")]),
        html.Div([html.H4("Precipitation"),html.P(f"{df['precip'].sum():.0f} {pl}")]),
        html.Div([html.H4("Wind Speed"), html.P(f"{df['wind'].mean():.0f} {wl}")])
    ]

    return mg, fc, table_data, table_cols, temp_ch, hum_ch, precip_ch, wind_ch, cards, start, end, f"Last Updated: {current_last_updated_time}"

if __name__=='__main__':
    app.run(debug=True, host='127.0.0.1', port=8050)
